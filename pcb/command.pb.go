// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: command.proto

package pcb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StopCommand struct {
	Instruction          uint32   `protobuf:"varint,1,opt,name=instruction,proto3" json:"instruction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopCommand) Reset()         { *m = StopCommand{} }
func (m *StopCommand) String() string { return proto.CompactTextString(m) }
func (*StopCommand) ProtoMessage()    {}
func (*StopCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}
func (m *StopCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopCommand.Merge(m, src)
}
func (m *StopCommand) XXX_Size() int {
	return m.Size()
}
func (m *StopCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_StopCommand.DiscardUnknown(m)
}

var xxx_messageInfo_StopCommand proto.InternalMessageInfo

func (m *StopCommand) GetInstruction() uint32 {
	if m != nil {
		return m.Instruction
	}
	return 0
}

type StopReply struct {
	ReturnStatus         uint32   `protobuf:"varint,1,opt,name=ReturnStatus,proto3" json:"ReturnStatus,omitempty"`
	ProcessName          string   `protobuf:"bytes,2,opt,name=ProcessName,proto3" json:"ProcessName,omitempty"`
	LagChkpt             []byte   `protobuf:"bytes,3,opt,name=LagChkpt,proto3" json:"LagChkpt,omitempty"`
	TimeSinceChkpt       []byte   `protobuf:"bytes,4,opt,name=TimeSinceChkpt,proto3" json:"TimeSinceChkpt,omitempty"`
	Content              []byte   `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopReply) Reset()         { *m = StopReply{} }
func (m *StopReply) String() string { return proto.CompactTextString(m) }
func (*StopReply) ProtoMessage()    {}
func (*StopReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1}
}
func (m *StopReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopReply.Merge(m, src)
}
func (m *StopReply) XXX_Size() int {
	return m.Size()
}
func (m *StopReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StopReply.DiscardUnknown(m)
}

var xxx_messageInfo_StopReply proto.InternalMessageInfo

func (m *StopReply) GetReturnStatus() uint32 {
	if m != nil {
		return m.ReturnStatus
	}
	return 0
}

func (m *StopReply) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *StopReply) GetLagChkpt() []byte {
	if m != nil {
		return m.LagChkpt
	}
	return nil
}

func (m *StopReply) GetTimeSinceChkpt() []byte {
	if m != nil {
		return m.TimeSinceChkpt
	}
	return nil
}

func (m *StopReply) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type InfoAllCommand struct {
	Instruction          uint32   `protobuf:"varint,1,opt,name=instruction,proto3" json:"instruction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoAllCommand) Reset()         { *m = InfoAllCommand{} }
func (m *InfoAllCommand) String() string { return proto.CompactTextString(m) }
func (*InfoAllCommand) ProtoMessage()    {}
func (*InfoAllCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{2}
}
func (m *InfoAllCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoAllCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoAllCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoAllCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoAllCommand.Merge(m, src)
}
func (m *InfoAllCommand) XXX_Size() int {
	return m.Size()
}
func (m *InfoAllCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoAllCommand.DiscardUnknown(m)
}

var xxx_messageInfo_InfoAllCommand proto.InternalMessageInfo

func (m *InfoAllCommand) GetInstruction() uint32 {
	if m != nil {
		return m.Instruction
	}
	return 0
}

type InfoAllReply struct {
	State                []byte   `protobuf:"bytes,1,opt,name=State,proto3" json:"State,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoAllReply) Reset()         { *m = InfoAllReply{} }
func (m *InfoAllReply) String() string { return proto.CompactTextString(m) }
func (*InfoAllReply) ProtoMessage()    {}
func (*InfoAllReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{3}
}
func (m *InfoAllReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoAllReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoAllReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoAllReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoAllReply.Merge(m, src)
}
func (m *InfoAllReply) XXX_Size() int {
	return m.Size()
}
func (m *InfoAllReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoAllReply.DiscardUnknown(m)
}

var xxx_messageInfo_InfoAllReply proto.InternalMessageInfo

func (m *InfoAllReply) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *InfoAllReply) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*StopCommand)(nil), "pcb.StopCommand")
	proto.RegisterType((*StopReply)(nil), "pcb.StopReply")
	proto.RegisterType((*InfoAllCommand)(nil), "pcb.InfoAllCommand")
	proto.RegisterType((*InfoAllReply)(nil), "pcb.InfoAllReply")
}

func init() { proto.RegisterFile("command.proto", fileDescriptor_213c0bb044472049) }

var fileDescriptor_213c0bb044472049 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xeb, 0xfe, 0xd2, 0xdb, 0xb4, 0x02, 0xc3, 0x60, 0x75, 0x88, 0xa2, 0x0c, 0xa8, 0x62,
	0x48, 0x51, 0x19, 0x91, 0x90, 0xa0, 0x03, 0x42, 0x42, 0x08, 0xb9, 0x4c, 0x6c, 0x89, 0x71, 0x4b,
	0x44, 0x63, 0x5b, 0x8e, 0x33, 0xf0, 0x26, 0xbc, 0x05, 0xaf, 0xc1, 0xc8, 0x23, 0xa0, 0xf0, 0x22,
	0x28, 0x4e, 0xa8, 0x12, 0x26, 0xc6, 0xfb, 0xdd, 0x73, 0x72, 0x72, 0xae, 0x61, 0xcc, 0x64, 0x92,
	0x84, 0xe2, 0x29, 0x50, 0x5a, 0x1a, 0x89, 0x3b, 0x8a, 0x45, 0xfe, 0x1c, 0x46, 0x2b, 0x23, 0xd5,
	0xb2, 0xdc, 0x60, 0x0f, 0x46, 0xb1, 0x48, 0x8d, 0xce, 0x98, 0x89, 0xa5, 0x20, 0xc8, 0x43, 0xb3,
	0x31, 0xad, 0x23, 0xff, 0x1d, 0xc1, 0xb0, 0x70, 0x50, 0xae, 0xb6, 0xaf, 0xd8, 0x07, 0x87, 0x72,
	0x93, 0x69, 0xb1, 0x32, 0xa1, 0xc9, 0xd2, 0xca, 0xd0, 0x60, 0xc5, 0x37, 0xef, 0xb5, 0x64, 0x3c,
	0x4d, 0xef, 0xc2, 0x84, 0x93, 0xb6, 0x87, 0x66, 0x43, 0x5a, 0x47, 0x78, 0x0a, 0x7b, 0xb7, 0xe1,
	0x66, 0xf9, 0xfc, 0xa2, 0x0c, 0xe9, 0x78, 0x68, 0xe6, 0xd0, 0xdd, 0x8c, 0x8f, 0x61, 0xf2, 0x10,
	0x27, 0x7c, 0x15, 0x0b, 0xc6, 0x4b, 0x45, 0xd7, 0x2a, 0xfe, 0x50, 0x4c, 0x60, 0xb0, 0x94, 0xc2,
	0x70, 0x61, 0x48, 0xcf, 0x0a, 0x7e, 0x47, 0x7f, 0x01, 0x93, 0x1b, 0xb1, 0x96, 0x97, 0xdb, 0xed,
	0xff, 0x5b, 0x5e, 0x80, 0x53, 0x79, 0xca, 0x9e, 0x47, 0xd0, 0x2b, 0xda, 0x70, 0xab, 0x75, 0x68,
	0x39, 0xd4, 0x33, 0xdb, 0x8d, 0xcc, 0xc5, 0x06, 0x06, 0xd7, 0x9a, 0x73, 0xc3, 0x35, 0x3e, 0x81,
	0x6e, 0x71, 0x2f, 0xbc, 0x1f, 0x28, 0x16, 0x05, 0xb5, 0x63, 0x4f, 0x27, 0x3b, 0x62, 0x43, 0xfc,
	0x16, 0x3e, 0x85, 0x6e, 0x2c, 0xd6, 0x12, 0x1f, 0xda, 0x4d, 0xf3, 0xaf, 0xa7, 0x07, 0x75, 0x58,
	0x39, 0xae, 0xc8, 0x47, 0xee, 0xa2, 0xcf, 0xdc, 0x45, 0x5f, 0xb9, 0x8b, 0xde, 0xbe, 0xdd, 0xd6,
	0x63, 0x3f, 0x98, 0x9f, 0x2b, 0x16, 0x45, 0x7d, 0xfb, 0xca, 0x67, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x90, 0xbf, 0xe3, 0x61, 0xf6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	Stop(ctx context.Context, in *StopCommand, opts ...grpc.CallOption) (*StopReply, error)
	Info(ctx context.Context, in *InfoAllCommand, opts ...grpc.CallOption) (*InfoAllReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Stop(ctx context.Context, in *StopCommand, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := c.cc.Invoke(ctx, "/pcb.Greeter/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Info(ctx context.Context, in *InfoAllCommand, opts ...grpc.CallOption) (*InfoAllReply, error) {
	out := new(InfoAllReply)
	err := c.cc.Invoke(ctx, "/pcb.Greeter/info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	Stop(context.Context, *StopCommand) (*StopReply, error)
	Info(context.Context, *InfoAllCommand) (*InfoAllReply, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) Stop(ctx context.Context, req *StopCommand) (*StopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedGreeterServer) Info(ctx context.Context, req *InfoAllCommand) (*InfoAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pcb.Greeter/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Stop(ctx, req.(*StopCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoAllCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pcb.Greeter/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Info(ctx, req.(*InfoAllCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pcb.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _Greeter_Stop_Handler,
		},
		{
			MethodName: "info",
			Handler:    _Greeter_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "command.proto",
}

func (m *StopCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Instruction != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Instruction))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StopReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TimeSinceChkpt) > 0 {
		i -= len(m.TimeSinceChkpt)
		copy(dAtA[i:], m.TimeSinceChkpt)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.TimeSinceChkpt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LagChkpt) > 0 {
		i -= len(m.LagChkpt)
		copy(dAtA[i:], m.LagChkpt)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.LagChkpt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProcessName) > 0 {
		i -= len(m.ProcessName)
		copy(dAtA[i:], m.ProcessName)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.ProcessName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReturnStatus != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.ReturnStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoAllCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoAllCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoAllCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Instruction != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Instruction))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoAllReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoAllReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoAllReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommand(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StopCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Instruction != 0 {
		n += 1 + sovCommand(uint64(m.Instruction))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReturnStatus != 0 {
		n += 1 + sovCommand(uint64(m.ReturnStatus))
	}
	l = len(m.ProcessName)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.LagChkpt)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.TimeSinceChkpt)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoAllCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Instruction != 0 {
		n += 1 + sovCommand(uint64(m.Instruction))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoAllReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommand(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StopCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instruction", wireType)
			}
			m.Instruction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Instruction |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnStatus", wireType)
			}
			m.ReturnStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnStatus |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LagChkpt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LagChkpt = append(m.LagChkpt[:0], dAtA[iNdEx:postIndex]...)
			if m.LagChkpt == nil {
				m.LagChkpt = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSinceChkpt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeSinceChkpt = append(m.TimeSinceChkpt[:0], dAtA[iNdEx:postIndex]...)
			if m.TimeSinceChkpt == nil {
				m.TimeSinceChkpt = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoAllCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoAllCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoAllCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instruction", wireType)
			}
			m.Instruction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Instruction |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoAllReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoAllReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoAllReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommand
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommand
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommand        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommand = fmt.Errorf("proto: unexpected end of group")
)
